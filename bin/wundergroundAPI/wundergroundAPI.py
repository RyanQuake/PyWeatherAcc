import json
import urllib
import datetime
import time
from pprint import pprint

# TODO: timestamps should be generated by differen package
# TODO: document api

gl_TT_DAYS=6
gl_TT_INTERVAL=3
gl_TT_MESSPOINTS=(24/gl_TT_INTERVAL)
gl_TT_STAMPS = [None] * (gl_TT_DAYS*gl_TT_MESSPOINTS)

def getData(i_apiKey, i_townkey):
    WUG_BASE="http://api.wunderground.com/api/"
    WUG_FOR_WEATHER="/hourly10day/"
    WUG_FORMAT=".json"

    retVal_dict = {}
    buffer_dict = {}

    # get forecast data
    url = WUG_BASE+i_apiKey+WUG_FOR_WEATHER+i_townkey+WUG_FORMAT
    response = urllib.urlopen("%s" % url)
    jdata = json.loads(response.read())

    # generate timestamps
    TT_TODAY  = datetime.date.today()
    iterator=0
    for i in range(0,gl_TT_DAYS):
        TODAY = TT_TODAY + datetime.timedelta(days=i)
        TIME  = datetime.datetime(100,1,1,00,00,00)
        for j in range(0,gl_TT_MESSPOINTS):
            gl_TT_STAMPS[iterator] = str(TODAY)+" "+str(TIME.time())
            TIME = TIME + datetime.timedelta(hours=gl_TT_INTERVAL)
            iterator=iterator+1

    # remove not needed information
    for element in jdata['hourly_forecast']:
        f_hour=int(element['FCTTIME']['hour'])
        f_minute=int(element['FCTTIME']['hour'])
        if 0 == f_hour%gl_TT_INTERVAL:
            timekey=element['FCTTIME']['epoch']
            timestamp=time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(int(timekey)))
            # this will save the data in the specified format
            buffer_dict[timestamp]=element
            del buffer_dict[timestamp]['FCTTIME']

    for key, value in buffer_dict.iteritems():
        for element in gl_TT_STAMPS:
            if element in key:
                retVal_dict[key]=value

    return retVal_dict
